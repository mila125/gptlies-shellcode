.386        ; Selecciona el modo de 32 bits
.model flat, stdcall
; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0


;INCLUDELIB LIBCMT
;INCLUDELIB OLDNAMES

PUBLIC  ?kernel32_str@@3PA_WA              ; kernel32_str
PUBLIC  ?load_lib_str@@3PADA               ; load_lib_str

_TEXT SEGMENT

; AlignESP is a simple call stub that ensures that the stack is 4-byte aligned
; prior to calling the entry point of the payload. This is necessary because
; 32-bit functions in Windows assume that they were called with 4-byte stack alignment.
; In most cases, the stack should already be 4-byte aligned, but we can add this just in case.

AlignESP PROC
    push esi ; Preserve ESI since we're stomping on it
    mov esi, esp ; Save the value of ESP so it can be restored
    and esp, 0FFFFFFFCh ; Align ESP to 4 bytes
    sub esp, 10h ; Allocate homing space for ExecutePayload
    call main ; Call the entry point of the payload
    mov esp, esi ; Restore the original value of ESP
    pop esi ; Restore ESI
    ret ; Return to caller
AlignESP ENDP

?load_lib_str@@3PADA DB 'LoadLibraryA', 00H    ; load_lib_str
    ORG $+3
?kernel32_str@@3PA_WA DB 'k', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'e', 00H
    DB 'l', 00H, '3', 00H, '2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l'
    DB 00H, 00H, 00H             ; kernel32_str
_TEXT ENDS

PUBLIC  ?get_module_by_name@@YAPEAXPEA_W@Z        ; get_module_by_name
PUBLIC  ?get_func_by_name@@YAPEAXPEAXPEAD@Z        ; get_func_by_name
PUBLIC  main

_TEXT SEGMENT
user32_dll_name$ = 32
message_box_name$ = 48
load_lib_name$ = 64
get_proc_name$ = 80
msg_title$ = 96
kernel32_dll_name$ = 112
msg_content$ = 144
base$ = 176
load_lib$ = 184
get_proc$ = 192
_MessageBoxW$ = 200
_LoadLibraryA$ = 208
u32_dll$ = 216
_GetProcAddress$ = 224

main PROC
; File C:\Users\6lady\source\repos\shellcode_1512\shellcode_1512\c-shellcode.cpp
; Line 14
$LN7:
    sub esp, 148h             ; 000000f8H
; Line 16
    mov eax, 107              ; 0000006bH
    mov WORD PTR kernel32_dll_name$[esp], ax
    mov eax, 101              ; 00000065H
    mov WORD PTR kernel32_dll_name$[esp+2], ax
    mov eax, 114              ; 00000072H
    mov WORD PTR kernel32_dll_name$[esp+4], ax
    mov eax, 110              ; 0000006eH
    mov WORD PTR kernel32_dll_name$[esp+6], ax
    mov eax, 101              ; 00000065H
    mov WORD PTR kernel32_dll_name$[esp+8], ax
    mov eax, 108              ; 0000006cH
    mov WORD PTR kernel32_dll_name$[esp+10], ax
    mov eax, 51               ; 00000033H
    mov WORD PTR kernel32_dll_name$[esp+12], ax
    mov eax, 50               ; 00000032H
    mov WORD PTR kernel32_dll_name$[esp+14], ax
    mov eax, 46               ; 0000002eH
    mov WORD PTR kernel32_dll_name$[esp+16], ax
    mov eax, 100              ; 00000064H
    mov WORD PTR kernel32_dll_name$[esp+18], ax
    mov eax, 108              ; 0000006cH
    mov WORD PTR kernel32_dll_name$[esp+20], ax
    mov eax, 108              ; 0000006cH
    mov WORD PTR kernel32_dll_name$[esp+22], ax
    xor eax, eax
    mov WORD PTR kernel32_dll_name$[esp+24], ax

; Line 17
    mov BYTE PTR load_lib_name$[esp], 76      ; 0000004cH
    mov BYTE PTR load_lib_name$[esp+1], 111    ; 0000006fH
    mov BYTE PTR load_lib_name$[esp+2], 97     ; 00000061H
    mov BYTE PTR load_lib_name$[esp+3], 100    ; 00000064H
    mov BYTE PTR load_lib_name$[esp+4], 76     ; 0000004cH
    mov BYTE PTR load_lib_name$[esp+5], 105    ; 00000069H
    mov BYTE PTR load_lib_name$[esp+6], 98     ; 00000062H
    mov BYTE PTR load_lib_name$[esp+7], 114    ; 00000072H
    mov BYTE PTR load_lib_name$[esp+8], 97     ; 00000061H
    mov BYTE PTR load_lib_name$[esp+9], 114    ; 00000072H
    mov BYTE PTR load_lib_name$[esp+10], 121   ; 00000079H
    mov BYTE PTR load_lib_name$[esp+11], 65    ; 00000041H
    mov BYTE PTR load_lib_name$[esp+12], 0

; Line 18
    mov BYTE PTR get_proc_name$[esp], 71     ; 00000047H
    mov BYTE PTR get_proc_name$[esp+1], 101   ; 00000065H
    mov BYTE PTR get_proc_name$[esp+2], 116   ; 00000074H
    mov BYTE PTR get_proc_name$[esp+3], 80    ; 00000050H
    mov BYTE PTR get_proc_name$[esp+4], 114   ; 00000072H
    mov BYTE PTR get_proc_name$[esp+5], 111   ; 0000006fH
    mov BYTE PTR get_proc_name$[esp+6], 99    ; 00000063H
    mov BYTE PTR get_proc_name$[esp+7], 65    ; 00000041H
    mov BYTE PTR get_proc_name$[esp+8], 100   ; 00000064H
    mov BYTE PTR get_proc_name$[esp+9], 100   ; 00000064H
    mov BYTE PTR get_proc_name$[esp+10], 114  ; 00000072H
    mov BYTE PTR get_proc_name$[esp+11], 101  ; 00000065H
    mov BYTE PTR get_proc_name$[esp+12], 115  ; 00000073H
    mov BYTE PTR get_proc_name$[esp+13], 115  ; 00000073H
    mov BYTE PTR get_proc_name$[esp+14], 0

; Continúa con el resto del código...

main ENDP
_TEXT ENDS
END